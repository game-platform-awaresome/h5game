apply plugin: 'com.android.application'

android {
    signingConfigs {
        jenkins {
            keyAlias 'xi'
            keyPassword '123456'
            storeFile getMyStoreFile()
            storePassword '123456'
        }
    }
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    //默认配置,所有 productFlavors 都会继承 defaultConfig 中配置的属性
    defaultConfig {

        //默认的 applicationId,一般与 AndroidManifest.xml 文件 package属性相同
        applicationId rootProject.ext.android.applicationId
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        flavorDimensions "versionCode"

        ndk {
            abiFilters "armeabi"
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs'] //修改so库存放位置
        }
    }


    //修改生成的apk名字
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def newName
            def timeNow
            def oldFile = output.outputFile
            def outDirectory = oldFile.parent

            if ("true".equals(IS_JENKINS)) {
                timeNow = JENKINS_TIME
                outDirectory = 'E:/gongju/apache-tomcat-8.5.16/webapps/android/apk'
                newName = 'mc-android-v' +
                        APP_VERSION + '-' + variant.productFlavors[0].name + timeNow + '-' + variant.buildType.name + '.apk'
            } else {
                timeNow = getDate()
                if (variant.buildType.name.equals('debug')) {
                    newName = "mc-android-v${APP_VERSION}-debug.apk"
                } else {
                    newName = 'mc-android-v' +
                            APP_VERSION + '-' + variant.productFlavors[0].name + timeNow + '-' + variant.buildType.name + '.apk'
                }
            }

            output.outputFile = new File(outDirectory, newName)

        }
    }




    flavorDimensions("channel")

    productFlavors {

        rx {
            applicationId rootProject.ext.productFlavors.applicationId
            resValue rootProject.ext.productFlavors.resValue_string, rootProject.ext.productFlavors.resValue_name, rootProject.ext.productFlavors.resValue_value
            versionCode rootProject.ext.productFlavors.versionCode
            versionName rootProject.ext.productFlavors.versionName

        }

        commonsoon {
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "commonsoon"]
        }

        /* my{
              applicationId "com.mc.rxmy"
              resValue "string","app_name","mc热血1"
              versionCode 1
              versionName "1.1"
              //修改 AndroidManifest.xml 里渠道变量
              manifestPlaceholders = [mc_channel_value:"rx",
                                      app_icon: "@drawable/icon_rx"]
          }
  */
    }

    productFlavors.all{ flavor ->
        flavor.manifestPlaceholders =[CHANNEL_VALUE: name]
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
    }






}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation rootProject.ext.dependence.libSupportV7
    implementation rootProject.ext.dependence.libconstraint
    testImplementation rootProject.ext.dependence.libjunit
    androidTestImplementation rootProject.ext.dependence.libtestrunner
    androidTestImplementation rootProject.ext.dependence.libtestespresso
    implementation files('libs/tbs_sdk_thirdapp_v3.1.0.1034_43100_sharewithdownload_obfs_20170301_182143.jar')
    implementation project(':H5SDKProxy')
}






def getMyStoreFile(){
    if("true".equals(IS_JENKINS)){
        return file('../xi')
    }else {
        return file('F:/AndroidStudioProjects/mcH5game/xi')

    }
}
def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMddHHmm')
    return formattedDate
}



